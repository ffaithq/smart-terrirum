




          







// Define the callback function
void MQTT::callback(char* topic, byte* payload, unsigned int length) {
    Serial.print("Received message on topic: ");
    Serial.println(topic);

    Serial.print("Message: ");
    for (unsigned int i = 0; i < length; i++) {
        Serial.print((char)payload[i]);
    }
    Serial.println();
}


int MQTT::send(char* topic, const String* valuesName, int nameCount, const String* values, int valueCount) {
    char buffer[256];

    int err = bundleJsonIntoBufferString(
        valuesName, nameCount, 
        values, valueCount, 
        buffer, sizeof(buffer),
        200
    );

    // Check if JSON was created successfully
    if (err != 0) {
        Serial.print("Error in JSON creation: ");
        Serial.println(err);
        return err;  // Return error code
    }

    // Debug Output
    Serial.println("✅ JSON created successfully. Output:");
    Serial.println(buffer);

    // Publish to MQTT
    bool pubSuccess = client.publish(topic, buffer);
    if (!pubSuccess) {
        Serial.println("❌ MQTT publish failed!");
        return -2;  // Return error if MQTT publish fails
    }

    Serial.println("✅ MQTT message sent successfully!");
    return 0;  // Success
}


int MQTT::bundleJsonIntoBufferString(
    const String* valueNames, size_t valueNamesCount,
    const String* values, size_t valuesCount,
    char* outBuffer, size_t bufferSize,
    int capacityJson // Pass deviceId explicitly
) {
  /*
    Function to bundle data into JSON for sending via MQTT
    Return Codes:
    0 - OK
    1 - Not enough values (valueNamesCount > valuesCount)
    2 - Not enough names (valueNamesCount < valuesCount)
    3 - Overflow of JSON file (too small capacityJson)
    4 - Output buffer too small (truncated JSON)
  */
 Serial.print("Number of values");
 Serial.println(valueNamesCount);
  // Check if the number of names and values match
  if (valueNamesCount > valuesCount) {
    Serial.println("[ERROR] Not enough values!");
    return 1;
  }
  if (valueNamesCount < valuesCount) {
    Serial.println("[ERROR] Not enough names!");
    return 2;
  }

  // Allocate space for JSON
  DynamicJsonDocument json(capacityJson); // Use DynamicJsonDocument for runtime capacity

  // Add deviceId
  json["deviceId"] = deviceID;

  // Add (name -> value) pairs
  for (size_t i = 0; i < valueNamesCount; i++) {
    json[valueNames[i]] = values[i];

    // Check for memory overflow
    if (json.memoryUsage() > json.capacity()) {
      Serial.println("[ERROR] Not enough memory to add new items!");
      return 3;
    }
  }

  // Serialize JSON into outBuffer
  size_t bytesWritten = serializeJson(json, outBuffer, bufferSize);
  if (bytesWritten + 1 >= bufferSize) { // Ensure space for null terminator
    Serial.println("[ERROR] JSON output truncated!");
    return 4;
  }

  return 0; // Success
}

// TODO: Add error if device number is -1. Trying send data before connection was establish

int MQTT::bundleJsonIntoBufferFloat(
    const String* valueNames, size_t valueNamesCount,
    const float*  values,     size_t valuesCount,
    char* outBuffer, size_t bufferSize,
    const int capacityJson
) {
  /*
  Function to bundle data into JSON for sending via MQTT
  Return Codes:
    0 - OK
    1 - Not enough values (valueNamesCount > valuesCount)
    2 - Not enough names (valueNamesCount < valuesCount)
    3 - Overflow of JSON document (too small capacityJson)
    4 - Output buffer too small (truncated JSON)
  */

  // Check if the number of names and values are mismatched
  if (valueNamesCount > valuesCount) {
    Serial.println("[ERROR] Not enough values!");
    return 1;
  }
  if (valueNamesCount < valuesCount) {
    Serial.println("[ERROR] Not enough names!");
    return 2;
  }

  // Create a DynamicJsonDocument with runtime-defined capacity
  DynamicJsonDocument json(capacityJson);

  // Add deviceId to JSON
  json["deviceId"] = deviceID;

  // Add name-value pairs to JSON
  for (size_t i = 0; i < valueNamesCount; i++) {
    json[valueNames[i]] = values[i];
  }

  // Serialize JSON into outBuffer
  size_t bytesWritten = serializeJson(json, outBuffer, bufferSize);
  if (bytesWritten + 1 > bufferSize) { // Ensure null terminator fits
    Serial.println("[ERROR] JSON output truncated!");
    return 4;
  }

  return 0; // Success
}

*/